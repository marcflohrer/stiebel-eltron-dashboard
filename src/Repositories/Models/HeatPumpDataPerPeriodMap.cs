using CsvHelper.Configuration;
using StiebelEltronDashboard.Models;

namespace StiebelEltronDashboard.Repositories.Models;
public sealed class HeatPumpDataPerPeriodMap : ClassMap<HeatPumpDataPerPeriod>
{
    public HeatPumpDataPerPeriodMap()
    {
        Map(m => m.PeriodStart).Index(1).Name("PeriodStart");
        Map(m => m.PeriodEnd).Index(2).Name("PeriodEnd");
        Map(m => m.ReturnTemperatureMin).Index(3).Name("ReturnTemperatureMin");
        Map(m => m.ReturnTemperatureMax).Index(4).Name("ReturnTemperatureMax");
        Map(m => m.ReturnTemperatureAverage).Index(5).Name("ReturnTemperatureAverage");
        Map(m => m.InletTemperatureMin).Index(6).Name("InletTemperatureMin");
        Map(m => m.InletTemperatureMax).Index(7).Name("InletTemperatureMax");
        Map(m => m.InletTemperatureAverage).Index(8).Name("InletTemperatureAverage");
        Map(m => m.AntiFreezeTemperatureMin).Index(9).Name("AntiFreezeTemperatureMin");
        Map(m => m.AntiFreezeTemperatureMax).Index(10).Name("AntiFreezeTemperatureMax");
        Map(m => m.AntiFreezeTemperatureAverage).Index(11).Name("AntiFreezeTemperatureAverage");
        Map(m => m.OutdoorTemperatureMin).Index(12).Name("OutdoorTemperatureMin");
        Map(m => m.OutdoorTemperatureMax).Index(13).Name("OutdoorTemperatureMax");
        Map(m => m.OutdoorTemperatureAverage).Index(14).Name("OutdoorTemperatureAverage");
        Map(m => m.ExhaustAirTemperatureMin).Index(15).Name("ExhaustAirTemperatureMin");
        Map(m => m.ExhaustAirTemperatureMax).Index(16).Name("ExhaustAirTemperatureMax");
        Map(m => m.ExhaustAirTemperatureAverage).Index(17).Name("ExhaustAirTemperatureAverage");
        Map(m => m.EvaporatorTemperatureMin).Index(18).Name("EvaporatorTemperatureMin");
        Map(m => m.EvaporatorTemperatureMax).Index(19).Name("EvaporatorTemperatureMax");
        Map(m => m.EvaporatorTemperatureAverage).Index(20).Name("EvaporatorTemperatureAverage");
        Map(m => m.CompressorInletTemperatureMin).Index(21).Name("CompressorInletTemperatureMin");
        Map(m => m.CompressorInletTemperatureMax).Index(22).Name("CompressorInletTemperatureMax");
        Map(m => m.CompressorInletTemperatureAverage).Index(23).Name("CompressorInletTemperatureAverage");
        Map(m => m.IntermediateInjectionTemperatureMin).Index(24).Name("IntermediateInjectionTemperatureMin");
        Map(m => m.IntermediateInjectionTemperatureMax).Index(25).Name("IntermediateInjectionTemperatureMax");
        Map(m => m.IntermediateInjectionTemperatureAverage).Index(26).Name("IntermediateInjectionTemperatureAverage");
        Map(m => m.HotGasTemperatureMin).Index(27).Name("HotGasTemperatureMin");
        Map(m => m.HotGasTemperatureMax).Index(28).Name("HotGasTemperatureMax");
        Map(m => m.HotGasTemperatureAverage).Index(29).Name("HotGasTemperatureAverage");
        Map(m => m.CondenserTemperatureMin).Index(30).Name("CondenserTemperatureMin");
        Map(m => m.CondenserTemperatureMax).Index(31).Name("CondenserTemperatureMax");
        Map(m => m.CondenserTemperatureAverage).Index(32).Name("CondenserTemperatureAverage");
        Map(m => m.OilSumpTemperatureMin).Index(33).Name("OilSumpTemperatureMin");
        Map(m => m.OilSumpTemperatureMax).Index(34).Name("OilSumpTemperatureMax");
        Map(m => m.OilSumpTemperatureAverage).Index(35).Name("OilSumpTemperatureAverage");
        Map(m => m.LowPressureMin).Index(36).Name("LowPressureMin");
        Map(m => m.LowPressureMax).Index(37).Name("LowPressureMax");
        Map(m => m.LowPressureAverage).Index(38).Name("LowPressureAverage");
        Map(m => m.PressureMediumMin).Index(39).Name("PressureMediumMin");
        Map(m => m.PressureMediumMax).Index(40).Name("PressureMediumMax");
        Map(m => m.PressureMediumAverage).Index(41).Name("PressureMediumAverage");
        Map(m => m.HighPressureMin).Index(42).Name("HighPressureMin");
        Map(m => m.HighPressureMax).Index(43).Name("HighPressureMax");
        Map(m => m.HighPressureAverage).Index(44).Name("HighPressureAverage");
        Map(m => m.WaterVolumeCurrentMin).Index(45).Name("WaterVolumeCurrentMin");
        Map(m => m.WaterVolumeCurrentMax).Index(46).Name("WaterVolumeCurrentMax");
        Map(m => m.WaterVolumeCurrentAverage).Index(47).Name("WaterVolumeCurrentAverage");
        Map(m => m.VoltageInverterMin).Index(48).Name("VoltageInverterMin");
        Map(m => m.VoltageInverterMax).Index(49).Name("VoltageInverterMax");
        Map(m => m.VoltageInverterAverage).Index(50).Name("VoltageInverterAverage");
        Map(m => m.ActualSpeedDensifierMin).Index(51).Name("ActualSpeedDensifierMin");
        Map(m => m.ActualSpeedDensifierMax).Index(52).Name("ActualSpeedDensifierMax");
        Map(m => m.ActualSpeedDensifierAverage).Index(53).Name("ActualSpeedDensifierAverage");
        Map(m => m.SettingSpeedCompressedMin).Index(54).Name("SettingSpeedCompressedMin");
        Map(m => m.SettingSpeedCompressedMax).Index(55).Name("SettingSpeedCompressedMax");
        Map(m => m.SettingSpeedCompressedAverage).Index(56).Name("SettingSpeedCompressedAverage");
        Map(m => m.FanPowerRelMin).Index(57).Name("FanPowerRelMin");
        Map(m => m.FanPowerRelMax).Index(58).Name("FanPowerRelMax");
        Map(m => m.FanPowerRelAverage).Index(59).Name("FanPowerRelAverage");
        Map(m => m.TotalPowerConsumptionStart).Index(60).Name("TotalPowerConsumptionStart");
        Map(m => m.TotalPowerConsumptionEnd).Index(61).Name("TotalPowerConsumptionEnd");
        Map(m => m.TotalPowerConsumptionDelta).Index(62).Name("TotalPowerConsumptionDelta");
        Map(m => m.VaporizerHeatQuantityHeatingDayStart).Index(63).Name("VaporizerHeatQuantityHeatingDayStart");
        Map(m => m.VaporizerHeatQuantityHeatingDayEnd).Index(64).Name("VaporizerHeatQuantityHeatingDayEnd");
        Map(m => m.VaporizerHeatQuantityHeatingDayDelta).Index(65).Name("VaporizerHeatQuantityHeatingDayDelta");
        Map(m => m.VaporizerHeatQuantityHeatingTotalStart).Index(66).Name("VaporizerHeatQuantityHeatingTotalStart");
        Map(m => m.VaporizerHeatQuantityHeatingTotalEnd).Index(67).Name("VaporizerHeatQuantityHeatingTotalEnd");
        Map(m => m.VaporizerHeatQuantityHeatingTotalDelta).Index(68).Name("VaporizerHeatQuantityHeatingTotalDelta");
        Map(m => m.VaporizerHeatQuantityHotWaterDayStart).Index(69).Name("VaporizerHeatQuantityHotWaterDayStart");
        Map(m => m.VaporizerHeatQuantityHotWaterDayEnd).Index(70).Name("VaporizerHeatQuantityHotWaterDayEnd");
        Map(m => m.VaporizerHeatQuantityHotWaterDayDelta).Index(71).Name("VaporizerHeatQuantityHotWaterDayDelta");
        Map(m => m.VaporizerHeatQuantityHotWaterTotalStart).Index(72).Name("VaporizerHeatQuantityHotWaterTotalStart");
        Map(m => m.VaporizerHeatQuantityHotWaterTotalEnd).Index(73).Name("VaporizerHeatQuantityHotWaterTotalEnd");
        Map(m => m.VaporizerHeatQuantityHotWaterTotalDelta).Index(74).Name("VaporizerHeatQuantityHotWaterTotalDelta");
        Map(m => m.ReheatingStagesHeatQuantityHeatingSumStart).Index(75).Name("ReheatingStagesHeatQuantityHeatingSumStart");
        Map(m => m.ReheatingStagesHeatQuantityHeatingSumEnd).Index(76).Name("ReheatingStagesHeatQuantityHeatingSumEnd");
        Map(m => m.ReheatingStagesHeatQuantityHeatingSumDelta).Index(77).Name("ReheatingStagesHeatQuantityHeatingSumDelta");
        Map(m => m.ReheatingStagesHeatQuantityHotWaterTotalStart).Index(78).Name("ReheatingStagesHeatQuantityHotWaterTotalStart");
        Map(m => m.ReheatingStagesHeatQuantityHotWaterTotalEnd).Index(79).Name("ReheatingStagesHeatQuantityHotWaterTotalEnd");
        Map(m => m.ReheatingStagesHeatQuantityHotWaterTotalDelta).Index(80).Name("ReheatingStagesHeatQuantityHotWaterTotalDelta");
        Map(m => m.PowerConsumptionHeatingDayStart).Index(81).Name("PowerConsumptionHeatingDayStart");
        Map(m => m.PowerConsumptionHeatingDayEnd).Index(82).Name("PowerConsumptionHeatingDayEnd");
        Map(m => m.PowerConsumptionHeatingDayDelta).Index(83).Name("PowerConsumptionHeatingDayDelta");
        Map(m => m.PowerConsumptionHeatingSumStart).Index(84).Name("PowerConsumptionHeatingSumStart");
        Map(m => m.PowerConsumptionHeatingSumEnd).Index(85).Name("PowerConsumptionHeatingSumEnd");
        Map(m => m.PowerConsumptionHeatingSumDelta).Index(86).Name("PowerConsumptionHeatingSumDelta");
        Map(m => m.PowerConsumptionHotWaterDayStart).Index(87).Name("PowerConsumptionHotWaterDayStart");
        Map(m => m.PowerConsumptionHotWaterDayEnd).Index(88).Name("PowerConsumptionHotWaterDayEnd");
        Map(m => m.PowerConsumptionHotWaterDayDelta).Index(89).Name("PowerConsumptionHotWaterDayDelta");
        Map(m => m.PowerConsumptionHotWaterSumStart).Index(90).Name("PowerConsumptionHotWaterSumStart");
        Map(m => m.PowerConsumptionHotWaterSumEnd).Index(91).Name("PowerConsumptionHotWaterSumEnd");
        Map(m => m.PowerConsumptionHotWaterSumDelta).Index(92).Name("PowerConsumptionHotWaterSumDelta");
        Map(m => m.RuntimeVaporizerHeatingStart).Index(93).Name("RuntimeVaporizerHeatingStart");
        Map(m => m.RuntimeVaporizerHeatingEnd).Index(94).Name("RuntimeVaporizerHeatingEnd");
        Map(m => m.RuntimeVaporizerHeatingDelta).Index(95).Name("RuntimeVaporizerHeatingDelta");
        Map(m => m.RuntimeVaporizerHotWaterStart).Index(96).Name("RuntimeVaporizerHotWaterStart");
        Map(m => m.RuntimeVaporizerHotWaterEnd).Index(97).Name("RuntimeVaporizerHotWaterEnd");
        Map(m => m.RuntimeVaporizerHotWaterDelta).Index(98).Name("RuntimeVaporizerHotWaterDelta");
        Map(m => m.RuntimeVaporizerDefrostStart).Index(99).Name("RuntimeVaporizerDefrostStart");
        Map(m => m.RuntimeVaporizerDefrostEnd).Index(100).Name("RuntimeVaporizerDefrostEnd");
        Map(m => m.RuntimeVaporizerDefrostDelta).Index(101).Name("RuntimeVaporizerDefrostDelta");
        Map(m => m.ReheatingStages1Start).Index(102).Name("ReheatingStages1Start");
        Map(m => m.ReheatingStages1End).Index(103).Name("ReheatingStages1End");
        Map(m => m.ReheatingStages1Delta).Index(104).Name("ReheatingStages1Delta");
        Map(m => m.ReheatingStages2Start).Index(105).Name("ReheatingStages2Start");
        Map(m => m.ReheatingStages2End).Index(106).Name("ReheatingStages2End");
        Map(m => m.ReheatingStages2Delta).Index(107).Name("ReheatingStages2Delta");
        Map(m => m.DefrostTimeStart).Index(108).Name("DefrostTimeStart");
        Map(m => m.DefrostTimeEnd).Index(109).Name("DefrostTimeEnd");
        Map(m => m.DefrostTimeDelta).Index(110).Name("DefrostTimeDelta");
        Map(m => m.DefrostStartsStart).Index(111).Name("DefrostStartsStart");
        Map(m => m.DefrostStartsEnd).Index(112).Name("DefrostStartsEnd");
        Map(m => m.DefrostStartsDelta).Index(113).Name("DefrostStartsDelta");
        Map(m => m.Year).Index(114).Name("Year");
        Map(m => m.PeriodKind).Index(115).Name("PeriodKind");
        Map(m => m.PeriodNumber).Index(116).Name("PeriodNumber");
        Map(m => m.DateUpdated).Index(117).Name("DateUpdated");
        Map(m => m.DateCreated).Index(118).Name("DateCreated");
        Map(m => m.First).Index(119).Name("First");
        Map(m => m.Last).Index(120).Name("Last");
        Map(m => m.PerformanceFactorPeriod).Index(121).Name("PerformanceFactorPeriod");
        Map(m => m.PerformanceFactorTotal).Index(122).Name("PerformanceFactorTotal");
    }
}

